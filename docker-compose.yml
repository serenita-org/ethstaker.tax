version: "3.8"

services:
  frontend_legacy:
    image: eth2-tax:latest
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    command: [
        "uvicorn", "src.frontend_legacy.app:app",
        "--host", "frontend_legacy",
        "--port", "8000",
        "--log-config", "etc/logging.yml",
    ]
    environment:
      FORWARDED_ALLOW_IPS: "*"
      REDIS_HOST:
      REDIS_PORT:

  api:
    image: eth2-tax:latest
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    command: "./tools/entrypoint_api_multiproc.sh"
    environment:
      DB_URI:
      REDIS_HOST:
      REDIS_PORT:
      BEACON_NODE_USE_INFURA:
      INFURA_PROJECT_ID:
      INFURA_SECRET:
      BEACON_NODE_HOST:
      BEACON_NODE_PORT:
      BEACON_NODE_RESPONSE_TIMEOUT:
      EXECUTION_NODE_HOST:
      EXECUTION_NODE_PORT:
      EXECUTION_NODE_RESPONSE_TIMEOUT:
      EXECUTION_NODE_INFURA_ARCHIVE_URL:
      WEB_CONCURRENCY: ${CONCURRENCY_API}
      PROMETHEUS_MULTIPROC_DIR:
    depends_on:
      - db
      - redis

  indexer_balances:
    image: eth2-tax:latest
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    command: [ "python", "./src/indexer/balances.py" ]
    environment:
      DB_URI:
      BEACON_NODE_USE_INFURA:
      INFURA_PROJECT_ID:
      INFURA_SECRET:
      BEACON_NODE_HOST:
      BEACON_NODE_PORT:
      BEACON_NODE_RESPONSE_TIMEOUT:
    depends_on:
      - db


  indexer_block_rewards:
    image: eth2-tax:latest
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    command: [ "python", "./src/indexer/block_rewards/main.py" ]
    environment:
      DB_URI:
      BEACON_NODE_USE_INFURA:
      INFURA_PROJECT_ID:
      INFURA_SECRET:
      BEACON_NODE_HOST:
      BEACON_NODE_PORT:
      BEACON_NODE_RESPONSE_TIMEOUT:
      EXECUTION_NODE_HOST:
      EXECUTION_NODE_PORT:
      EXECUTION_NODE_RESPONSE_TIMEOUT:
      EXECUTION_NODE_INFURA_ARCHIVE_URL:
    depends_on:
      - db

  indexer_validators:
    image: eth2-tax:latest
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    command: [ "python", "./src/indexer/validators.py" ]
    environment:
      DB_URI:
      BEACON_NODE_HOST:
      BEACON_NODE_PORT:
      BEACON_NODE_RESPONSE_TIMEOUT:
    depends_on:
      - db

  indexer_withdrawals:
    image: eth2-tax:latest
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    command: [ "python", "./src/indexer/withdrawals.py" ]
    environment:
      DB_URI:
      BEACON_NODE_HOST:
      BEACON_NODE_PORT:
      BEACON_NODE_RESPONSE_TIMEOUT:
    depends_on:
      - db

  indexer_rocket_pool:
    image: eth2-tax:latest
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    command: [ "python", "./src/indexer/rocket_pool/main.py" ]
    environment:
      DB_URI:
      BEACON_NODE_USE_INFURA:
      INFURA_PROJECT_ID:
      INFURA_SECRET:
      BEACON_NODE_HOST:
      BEACON_NODE_PORT:
      BEACON_NODE_RESPONSE_TIMEOUT:
      EXECUTION_NODE_HOST:
      EXECUTION_NODE_PORT:
      EXECUTION_NODE_RESPONSE_TIMEOUT:
      EXECUTION_NODE_INFURA_ARCHIVE_URL:
    depends_on:
      - db

  indexer_prices:
    image: eth2-tax:latest
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    command: [ "python", "./src/indexer/prices.py" ]
    environment:
      DB_URI:
    depends_on:
      - db

  beacon_node:
    image: sigp/lighthouse:v7.0.1
    restart: unless-stopped
    command: [
        "lighthouse",
        "--network",
        "mainnet",
        "bn",
        "--http",
        "--http-address",
        "0.0.0.0",
        "--metrics",
        "--metrics-address",
        "0.0.0.0",
        "--execution-endpoint=http://geth:8551",
        "--execution-jwt=/tmp/jwt_secret",
        "--checkpoint-sync-url=https://mainnet.checkpoint.sigp.io",
        "--reconstruct-historic-states",
        "--disable-backfill-rate-limiting",
    ]
    stop_grace_period: 15m
    ports:
      # P2P
      - "9000:9000/tcp"
      - "9000:9000/udp"
    volumes:
      - cl_data:/root/.lighthouse
      - ./etc/jwt_secret.hex:/tmp/jwt_secret

  geth:
    image: ethereum/client-go:v1.15.11
    command:
      - "--datadir=/data"
      - "--http"
      - "--http.addr=0.0.0.0"
      - "--http.vhosts=*"
      - "--authrpc.addr=geth"
      - "--authrpc.vhosts=*"
      - "--authrpc.jwtsecret=/tmp/jwt_secret"
      - "--port=30303"
      - "--metrics"
      - "--metrics.addr=0.0.0.0"
    restart: unless-stopped
    stop_signal: SIGINT
    stop_grace_period: 15m
    ports:
      # P2P
      - "30303:30303/tcp"
      - "30303:30303/udp"
    volumes:
      - el_data:/data
      - ./etc/jwt_secret.hex:/tmp/jwt_secret

  db:
    image: postgres:13.9
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE_NAME}
    volumes:
      - db_data:/var/lib/postgresql/data

  redis:
    image: redis:7.0.8
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ${ABSOLUTE_ROOT_PATH}/etc/redis.conf:/usr/local/etc/redis/redis.conf
      - redis_data:/data

  caddy:
    image: caddy:2.6.2-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ${ABSOLUTE_ROOT_PATH}/etc/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config_data:/config
      - ${ABSOLUTE_ROOT_PATH}/src/frontend_vue/dist:/frontend_dist

  prometheus:
    image: prom/prometheus:v2.41.0
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.retention.time=1y'
      - '--web.external-url=http://ethstaker-tax:9090'
    volumes:
      - ${ABSOLUTE_ROOT_PATH}/etc/prometheus.yml:/etc/prometheus/prometheus.yml
      - ${ABSOLUTE_ROOT_PATH}/etc/alert.rules:/etc/prometheus/alert.rules
      - prometheus_data:/prometheus

  node_exporter:
    image: prom/node-exporter:v1.5.0
    restart: unless-stopped

  pg_exporter:
    image: prometheuscommunity/postgres-exporter:v0.11.1
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: postgresql://${DB_USERNAME}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_DATABASE_NAME}?sslmode=disable
    depends_on:
      - db

  adminer:
    image: adminer:4.8.1
    restart: unless-stopped
    depends_on:
      - db

  grafana:
    image: grafana/grafana:9.5.7
    restart: unless-stopped
    environment:
      # Hopefully fixes the false positive alerts on a locked DB...
      GF_DATABASE_WAL: "true"
    volumes:
      - ${ABSOLUTE_ROOT_PATH}/etc/grafana/provisioning:/etc/grafana/provisioning
      - ${ABSOLUTE_ROOT_PATH}/etc/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana

volumes:
  cl_data:
  el_data:
  caddy_data:
  caddy_config_data:
  db_data:
  grafana_data:
  prometheus_data:
  redis_data:
